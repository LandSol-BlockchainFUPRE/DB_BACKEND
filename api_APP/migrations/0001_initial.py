# Generated by Django 5.1.7 on 2025-05-30 16:42

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='NINInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nin', models.CharField(help_text='The 11-digit National Identification Number.', max_length=11, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_nin', message='NIN must be exactly 11 digits.', regex='^\\d{11}$')])),
                ('first_name', models.CharField(help_text='The first name of the individual.', max_length=100)),
                ('middle_name', models.CharField(blank=True, help_text='The middle name of the individual (optional).', max_length=100, null=True)),
                ('last_name', models.CharField(help_text='The last name of the individual.', max_length=100)),
                ('date_of_birth', models.DateField(help_text='The date of birth of the individual.')),
                ('phone_number', models.CharField(blank=True, help_text='The phone number associated with the NIN (optional).', max_length=20, null=True)),
                ('email', models.EmailField(blank=True, help_text='The email address associated with the NIN (optional).', max_length=254, null=True)),
                ('date_registered', models.DateTimeField(default=django.utils.timezone.now, help_text='The date and time when this NIN record was created.')),
            ],
            options={
                'verbose_name': 'NIN Information',
                'verbose_name_plural': 'NIN Information',
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('full_address', models.TextField(help_text='Full physical address of the property.')),
                ('property_type', models.CharField(choices=[('land', 'Land')], help_text='Type of property (e.g., residential, commercial).', max_length=50)),
                ('unique_property_identifier', models.CharField(help_text='Unique identifier for the property (e.g., Land Title Number, Cadastral Number).', max_length=255, unique=True)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the property (e.g., number of rooms, size).', null=True)),
                ('proof_of_ownership_document', models.FileField(blank=True, help_text='Scanned copy or reference to the current title deed/certificate of occupancy.', null=True, upload_to='property_documents/proof_of_ownership/')),
                ('gps_latitude', models.DecimalField(blank=True, decimal_places=6, help_text='Latitude coordinate of the property.', max_digits=9, null=True)),
                ('gps_longitude', models.DecimalField(blank=True, decimal_places=6, help_text='Longitude coordinate of the property.', max_digits=9, null=True)),
                ('survey_plan_hash', models.CharField(blank=True, help_text="Cryptographic hash of the property's survey plan.", max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fullname', models.CharField(help_text='Link to the Django built-in User model.', max_length=200)),
                ('date_of_birth', models.DateField(blank=True, help_text="User's date of birth (e.g., YYYY-MM-DD).", null=True)),
                ('residential_address', models.TextField(help_text="User's full residential address.")),
                ('id_number', models.CharField(help_text='Number of the government-issued identification.', max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('transaction_price', models.DecimalField(decimal_places=2, help_text='The agreed-upon price for the transaction.', max_digits=15)),
                ('transaction_date', models.DateField(default=django.utils.timezone.now, help_text='The date the transaction is initiated or agreed upon.')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('signed', 'Signed'), ('verified', 'Verified'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', help_text='Current status of the transaction.', max_length=50)),
                ('blockchain_transaction_hash', models.CharField(blank=True, help_text='The hash of this transaction as recorded on the blockchain.', max_length=255, null=True, unique=True)),
                ('blockchain_block_number', models.BigIntegerField(blank=True, help_text='The block number on the blockchain where this transaction was confirmed.', null=True)),
                ('blockchain_timestamp', models.DateTimeField(blank=True, help_text='Timestamp from the blockchain when the transaction was confirmed.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('buyer', models.ForeignKey(help_text='The user buying the property.', on_delete=django.db.models.deletion.PROTECT, related_name='buying_transactions', to=settings.AUTH_USER_MODEL)),
                ('property', models.ForeignKey(help_text='The property involved in this transaction.', on_delete=django.db.models.deletion.PROTECT, related_name='transactions', to='api_APP.property')),
                ('seller', models.ForeignKey(help_text='The user selling the property.', on_delete=django.db.models.deletion.PROTECT, related_name='selling_transactions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='property',
            name='current_owner',
            field=models.ForeignKey(help_text='The current legal owner of the property.', on_delete=django.db.models.deletion.PROTECT, related_name='owned_properties', to='api_APP.userprofile'),
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('document_type', models.CharField(choices=[('sale_agreement', 'Sale Agreement'), ('deed_of_assignment', 'Deed of Assignment'), ('power_of_attorney', 'Power of Attorney'), ('title_deed', 'Title Deed'), ('certificate_of_occupancy', 'Certificate of Occupancy'), ('other', 'Other')], help_text='Type of legal document.', max_length=100)),
                ('document_file', models.FileField(help_text='The actual legal document file (e.g., PDF).', upload_to='legal_documents/')),
                ('document_hash', models.CharField(help_text='SHA-256 hash of the document content for blockchain integrity.', max_length=255, unique=True)),
                ('upload_date', models.DateTimeField(auto_now_add=True)),
                ('property', models.ForeignKey(help_text='The property this document pertains to.', on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='api_APP.property')),
                ('uploaded_by', models.ForeignKey(help_text='User who uploaded this document.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='api_APP.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='DigitalSignature',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('signature_value', models.TextField(help_text="The actual digital signature string generated by the signer's private key.")),
                ('signer_public_key', models.CharField(help_text='The public key of the signer used to verify the signature.', max_length=255)),
                ('signed_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the document was digitally signed.')),
                ('document_hash_at_signing', models.CharField(help_text='The hash of the document content at the moment of signing.', max_length=255)),
                ('blockchain_signature_hash', models.CharField(blank=True, help_text='Optional: Hash of the blockchain transaction confirming this signature.', max_length=255, null=True, unique=True)),
                ('signer', models.ForeignKey(help_text='The user who provided the digital signature.', on_delete=django.db.models.deletion.PROTECT, related_name='signatures', to=settings.AUTH_USER_MODEL)),
                ('document', models.ForeignKey(help_text='The document that was signed.', on_delete=django.db.models.deletion.CASCADE, related_name='signatures', to='api_APP.document')),
            ],
            options={
                'unique_together': {('document', 'signer', 'signature_value')},
            },
        ),
    ]
